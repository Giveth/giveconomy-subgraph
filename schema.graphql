type GIVPower @entity {
  id: ID!
  initialDate: BigInt!
  locksCreated: Int!
  roundDuration: Int!
  totalGIVLocked: BigInt!
}

type TokenLock @entity {
  id: ID!
  user: User!
  amount: BigInt!
  rounds: Int!
  untilRound: Int!
  unlockableAt: BigInt
  unlockedAt: BigInt
  unlocked: Boolean!
}

type User @entity {
  id: ID!
  givLocked: BigInt!
  lastGivPowerUpdateTime: BigInt!
  locksOwned: [TokenLock!] @derivedFrom(field: "user")
  tokensBalance: [TokenBalance!] @derivedFrom(field: "user")
  unipoolsBalance: [UnipoolBalance!] @derivedFrom(field: "user")
  tokenDistroBalance: [TokenDistroBalance!] @derivedFrom(field: "user")
  giversPFPToken: [GiversPFPToken!] @derivedFrom(field: "user")
}

type UserGivPowerSnapshot @entity {
    id: ID!
    timestamp: BigInt!
    user: User!
    givPowerAmount: BigInt!
    cumulativeGivPowerAmount: BigInt!
}

type TokenBalance @entity {
  id: ID!
  balance: BigInt!
  user: User!
  token: String!
  updatedAt: BigInt!
}

type UnipoolBalance @entity {
  id: ID!
  balance: BigInt!
  user: User!
  unipool: String!
  rewards: BigInt!
  rewardPerTokenPaid: BigInt!
  updatedAt: BigInt!
}

type BalanceChange @entity {
  id: ID!
  account: String!
  contractAddress: String!
  time: BigInt!
  block: BigInt!
  amount: BigInt!
  newBalance: BigInt!
}

type Unipool @entity {
  id: ID!
  periodFinish: BigInt
  totalSupply: BigInt!
  rewardRate: BigInt!
  lastUpdateTime: BigInt
  rewardPerTokenStored: BigInt!
}

type TokenDistroBalance @entity {
  id: ID!
  user: User!
  allocatedTokens: BigInt!
  allocationCount: BigInt!
  claimed: BigInt!
  givback: BigInt!
  givDropClaimed: Boolean
  givbackLiquidPart: BigInt!
  tokenDistroAddress: String
}

type TokenAllocation @entity {
  id: ID!
  recipient: String!
  amount: BigInt!
  timestamp: BigInt!
  txHash: String!
  distributor: String
  givback: Boolean
  praise: Boolean
  tokenDistroAddress: String!
}

type TransactionTokenAllocation @entity {
  id: ID!
  tokenAllocationIds: [String!]!
}

type TokenDistro @entity {
  id: ID!
  totalTokens: BigInt
  startTime: BigInt
  cliffTime: BigInt
  duration: BigInt
  initialAmount: BigInt
  lockedAmount: BigInt
}

type UniswapPosition @entity {
    id: ID!
    tokenId: String!
    token0: String!
    token1: String!
    liquidity: BigInt!
    tickLower: Int!
    tickUpper: Int!
    tokenURI: String!
    owner: String!
    staker: String
    staked: Boolean
    closed: Boolean
}

type UniswapV3Pool @entity {
    id: ID!
    token0: String!
    token1: String!
    sqrtPriceX96: BigInt!
    tick: BigInt!
    liquidity: BigInt!
}

type UniswapInfinitePosition @entity {
    id: ID!
    lastUpdateTimeStamp: BigInt!
    lastRewardAmount: BigInt!
}

type GiversPFPToken @entity {
    id: ID!
    tokenId: Int!
    user: User!
    imageIpfs: String!
    contractAddress: String!
}

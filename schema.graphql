type GIVPower @entity {
  id: ID!
  initialDate: Int!
  locksCreated: Int!
  roundDuration: Int!
  totalGIVLocked: BigInt!
}

type TokenLock @entity {
  id: ID!
  user: User!
  amount: BigInt!
  rounds: Int!
  untilRound: Int!
  unlockableAt: Int
  unlockedAt: Int
  unlocked: Boolean!
}

type User @entity {
  id: ID!
  givLocked: BigInt!
  locksOwned: [TokenLock!] @derivedFrom(field: "user")
  tokensBalance: [TokenBalance!] @derivedFrom(field: "user")
  unipoolsBalance: [UnipoolBalance!] @derivedFrom(field: "user")
}

type TokenBalance @entity {
    id: ID!
    balance: BigInt!
    user: User!
    token: String!
}

type UnipoolBalance @entity {
    id: ID!
    balance: BigInt!
    user: User!
    unipool: String!
    rewards:  BigInt!
    rewardPerTokenPaid:  BigInt!
}


type Unipool @entity {
    id: ID!
    periodFinish: BigInt
    totalSupply : BigInt!
    rewardRate: BigInt!
    lastUpdateTime: BigInt
    rewardPerTokenStored: BigInt!
}
